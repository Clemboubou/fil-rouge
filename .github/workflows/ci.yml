name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'

jobs:
  # Frontend Lint & Build
  frontend-lint:
    name: Frontend Lint & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint code
      working-directory: ./frontend
      run: npm run lint --if-present || echo "No lint script found"

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  # Frontend Tests
  frontend-test:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test -- --run --reporter=verbose

    - name: Generate coverage report
      working-directory: ./frontend
      run: npm run test:coverage -- --run || echo "Coverage generation failed"
      continue-on-error: true

  # Backend Lint
  backend-lint:
    name: Backend Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Lint code
      working-directory: ./backend
      run: npm run lint --if-present || echo "No lint script found"

  # Backend Tests
  backend-test:
    name: Backend Unit Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: quizmaster_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Wait for MySQL
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -u root -proot --silent; then
            echo "MySQL is ready"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done

    - name: Run unit tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: quizmaster_test
        DB_USER: root
        DB_PASSWORD: root
        JWT_SECRET: test-secret-key-for-ci
        BCRYPT_ROUNDS: 4
      run: npm test || echo "Tests not configured yet"
      continue-on-error: true

  # E2E Tests (Cypress)
  e2e-test:
    name: E2E Tests (Cypress)
    runs-on: ubuntu-latest
    needs: [frontend-lint, backend-test]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: quizmaster_e2e
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Start backend server
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: quizmaster_e2e
        DB_USER: root
        DB_PASSWORD: root
        JWT_SECRET: test-secret-key-for-e2e
        PORT: 5000
        CORS_ORIGIN: http://localhost:3000
      run: |
        npm start &
        echo $! > backend.pid

    - name: Wait for backend
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:5000/health 2>/dev/null; then
            echo "Backend is ready"
            break
          fi
          echo "Waiting for backend... ($i/30)"
          sleep 2
        done

    - name: Run Cypress tests
      working-directory: ./frontend
      env:
        CYPRESS_baseUrl: http://localhost:3000
      run: npm run cypress:run || echo "E2E tests not fully configured"
      continue-on-error: true

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots/
        retention-days: 7

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: frontend/cypress/videos/
        retention-days: 7

  # Docker Build
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: quizmaster-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: quizmaster-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Audit
  security-audit:
    name: Security Audit (npm audit)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Audit frontend dependencies
      working-directory: ./frontend
      run: npm audit --audit-level=moderate || echo "Vulnerabilities found (non-blocking)"
      continue-on-error: true

    - name: Audit backend dependencies
      working-directory: ./backend
      run: npm audit --audit-level=moderate || echo "Vulnerabilities found (non-blocking)"
      continue-on-error: true

  # Summary Job
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-test, backend-lint, backend-test, docker-build, security-audit]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "‚úÖ CI Pipeline completed"
        echo "Frontend Lint: ${{ needs.frontend-lint.result }}"
        echo "Frontend Tests: ${{ needs.frontend-test.result }}"
        echo "Backend Lint: ${{ needs.backend-lint.result }}"
        echo "Backend Tests: ${{ needs.backend-test.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"

    - name: Notify success
      if: success()
      run: echo "üéâ All CI checks passed!"

    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Some CI checks failed"
        exit 1
